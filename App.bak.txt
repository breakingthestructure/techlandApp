import React from 'react';
import { StatusBar, Alert } from 'react-native';
import { createDrawerNavigator } from 'react-navigation';
import { Container, Content, Spinner } from 'native-base';
import firebase from 'react-native-firebase';
import type { Notification, NotificationOpen } from 'react-native-firebase';
import Login from './components/screens/Auth/Login';
import Menu from './components/screens/Auth/Menu';
import Home from './components/screens/Home/Home';
import MapProject from './components/screens/Project/MapProject';
import ListNews from './components/screens/News/ListNews';
import DetailNews from './components/screens/News/DetailNews';
import SetCalendar from './components/screens/Project/SetCalendar';
import TabProject from './components/screens/Project/TabProject';
import Config from './components/screens/Auth/Config';
import CalcDebt from './components/screens/Project/CalcDebt';
import AdvanceSearch from './components/screens/Project/AdvanceSearch';
import TablePackage from './components/screens/Project/TablePackage';
import DetailApartment from './components/screens/Project/DetailApartment';
import DetailProject from './components/screens/Project/DetailProject';
import MyNotification from './components/screens/Auth/MyNotification';
// import TestMarker from './components/screens/Project/TestMarker';

StatusBar.setHidden(true);

const Routes = createDrawerNavigator(
  {
    HomeScreen: {
      screen: Home
    },
    LoginScreen: {
      screen: Login
    },
    MapScreen: {
      screen: MapProject
    },
    NewsScreen: {
      screen: ListNews
    },
    DetailNewsScreen: {
      screen: DetailNews
    },
    SetCalendarProjectScreen: {
      screen: SetCalendar
    },
    TabProjectScreen: {
      screen: TabProject
    },
    ConfigScreen: {
      screen: Config
    },
    CalcDebtScreen: {
      screen: CalcDebt
    },
    AdvanceSearchScreen: {
      screen: AdvanceSearch
    },
    TablePackageScreen: {
      screen: TablePackage
    },
    DetailApartmentScreen: {
      screen: DetailApartment
    },
    DetailProjectScreen: {
      screen: DetailProject
    },
    NotificationScreen: {
      screen: MyNotification
    }
  },
  {
    initialRouteName: 'TabProjectScreen',
    contentComponent: Menu,
  }
);

export default class App extends React.Component {
  constructor() {
    super();
    this.state = {
      loaded: false
    };
  }
  async componentDidMount() {
    setTimeout(() => {
      this.setState({ loaded: true });
    }, 200);
    const notificationOpen: NotificationOpen = await firebase.notifications().getInitialNotification();
    if (notificationOpen) {
      const action = notificationOpen.action;
      const notification: Notification = notificationOpen.notification;
      var seen = [];
      // alert(JSON.stringify(notification.data, function (key, val) {
      //   if (val != null && typeof val == "object") {
      //     if (seen.indexOf(val) >= 0) {
      //       return;
      //     }
      //     seen.push(val);
      //   }
      //   return val;
      // }));
    }
    const channel = new firebase.notifications.Android.Channel('test-channel', 'Test Channel', firebase.notifications.Android.Importance.Max)
      .setDescription('My apps test channel');
    // Create the channel
    firebase.notifications().android.createChannel(channel);
    this.notificationDisplayedListener = firebase.notifications().onNotificationDisplayed((notification: Notification) => {
      // Process your notification as required
      // ANDROID: Remote notifications do not contain the channel ID. You will have to specify this manually if you'd like to re-display the notification.
    });
    this.notificationListener = firebase.notifications().onNotification((notification: Notification) => {
      // Process your notification as required
      notification
        .android.setChannelId('test-channel')
        .android.setSmallIcon('ic_launcher');
      firebase.notifications()
        .displayNotification(notification);
    });
    this.notificationOpenedListener = firebase.notifications().onNotificationOpened((notificationOpen: NotificationOpen) => {
      // Get the action triggered by the notification being opened
      // const action = notificationOpen.action;
      // Get information about the notification that was opened
      const notification: Notification = notificationOpen.notification;
      Alert.alert(
        notification.title,
        notification.body
      );
      firebase.notifications().removeDeliveredNotification(notification.notificationId);
    });
  }
  componentWillUnmount() {
    this.notificationDisplayedListener();
    this.notificationListener();
    this.notificationOpenedListener();
  }
  render() {
    if (this.state.loaded) {
      return (
        <Routes />
      );
    }
    return (
      <Container>
        <Content >
          <Spinner />
        </Content>
      </Container>
    );
  }
}
